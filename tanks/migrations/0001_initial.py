# Generated by Django 4.2.21 on 2025-05-30 20:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WaterTank',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('location', models.CharField(help_text='Full address or location description', max_length=500)),
                ('borough', models.CharField(choices=[('manhattan', 'Manhattan'), ('brooklyn', 'Brooklyn'), ('queens', 'Queens'), ('bronx', 'Bronx'), ('staten_island', 'Staten Island')], max_length=50)),
                ('tank_type', models.CharField(choices=[('rooftop', 'Rooftop Tank'), ('basement', 'Basement Tank'), ('ground', 'Ground Level Tank'), ('elevated', 'Elevated Tank')], default='rooftop', max_length=20)),
                ('capacity_gallons', models.PositiveIntegerField(help_text='Tank capacity in gallons')),
                ('installation_date', models.DateField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('maintenance', 'Under Maintenance'), ('offline', 'Offline'), ('error', 'Error')], default='active', max_length=20)),
                ('building_name', models.CharField(blank=True, max_length=200)),
                ('building_owner', models.CharField(blank=True, max_length=200)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('contact_phone', models.CharField(blank=True, max_length=20)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sensor_type', models.CharField(choices=[('level', 'Water Level Sensor'), ('temperature', 'Temperature Sensor'), ('ph', 'pH Sensor'), ('turbidity', 'Turbidity Sensor'), ('dissolved_oxygen', 'Dissolved Oxygen Sensor'), ('conductivity', 'Conductivity Sensor'), ('flow', 'Flow Rate Sensor')], max_length=20)),
                ('model_number', models.CharField(max_length=100)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('installation_date', models.DateField()),
                ('last_maintenance', models.DateField(blank=True, null=True)),
                ('next_maintenance', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Under Maintenance'), ('error', 'Error'), ('low_battery', 'Low Battery')], default='active', max_length=20)),
                ('battery_level', models.PositiveIntegerField(blank=True, help_text='Battery level percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('last_calibration', models.DateTimeField(blank=True, null=True)),
                ('calibration_offset', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='tanks.watertank')),
            ],
            options={
                'ordering': ['tank', 'sensor_type'],
                'unique_together': {('tank', 'sensor_type')},
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('low_level', 'Low Water Level'), ('high_level', 'High Water Level'), ('temperature', 'Temperature Alert'), ('ph', 'pH Alert'), ('turbidity', 'Turbidity Alert'), ('sensor_offline', 'Sensor Offline'), ('low_battery', 'Low Battery'), ('maintenance_due', 'Maintenance Due'), ('data_anomaly', 'Data Anomaly')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='active', max_length=15)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('threshold_value', models.FloatField(blank=True, null=True)),
                ('actual_value', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='tanks.sensor')),
                ('tank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='tanks.watertank')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('water_level_inches', models.FloatField(blank=True, help_text='Water level in inches', null=True)),
                ('water_level_percentage', models.FloatField(blank=True, help_text='Water level as percentage of tank capacity', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('water_temperature_f', models.FloatField(blank=True, help_text='Water temperature in Fahrenheit', null=True)),
                ('ambient_temperature_f', models.FloatField(blank=True, help_text='Ambient temperature in Fahrenheit', null=True)),
                ('ph_level', models.FloatField(blank=True, help_text='pH level (0-14)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('turbidity_ntu', models.FloatField(blank=True, help_text='Turbidity in NTU', null=True)),
                ('dissolved_oxygen_ppm', models.FloatField(blank=True, help_text='Dissolved oxygen in ppm', null=True)),
                ('conductivity_us_cm', models.FloatField(blank=True, help_text='Conductivity in ÂµS/cm', null=True)),
                ('flow_rate_gpm', models.FloatField(blank=True, help_text='Flow rate in gallons per minute', null=True)),
                ('total_flow_gallons', models.FloatField(blank=True, help_text='Total flow in gallons', null=True)),
                ('signal_strength', models.IntegerField(blank=True, help_text='Signal strength percentage', null=True)),
                ('battery_voltage', models.FloatField(blank=True, help_text='Battery voltage', null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('quality_flags', models.JSONField(blank=True, default=dict, help_text='Data quality indicators')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sensor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='tanks.sensor')),
                ('tank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_data', to='tanks.watertank')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['tank', '-timestamp'], name='tanks_senso_tank_id_2ae589_idx'), models.Index(fields=['sensor', '-timestamp'], name='tanks_senso_sensor__fbd9ed_idx'), models.Index(fields=['-timestamp'], name='tanks_senso_timesta_56cc7a_idx')],
            },
        ),
    ]
